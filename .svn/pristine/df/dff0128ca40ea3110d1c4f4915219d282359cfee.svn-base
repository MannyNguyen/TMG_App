package com.ctyprosoft.tmg;

import java.util.Random;

import com.android.activity.RegisterActivity;
import com.ctyprosoft.tmg.R;
import com.google.android.gcm.GCMBaseIntentService;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.util.Log;


public class GCMIntentService extends GCMBaseIntentService {

	private static final String TAG = "TAG";
	public static final String SENDER_ID = "823769555954";

	public GCMIntentService() {
		super(SENDER_ID);
		Log.d("TAG", "GCMIntentService");
	}

	/**
	 * Method called on device registered
	 **/
	@Override
	protected void onRegistered(Context context, String registrationId) {
		Log.d(TAG, "GCMIntentService Device registered: regId = "
				+ registrationId);
		
		FlashActivity.mRegId = registrationId;
		// displayMessage(context, "Your device registred with GCM");

	}

	/**
	 * Method called on device un registred
	 * */
	@Override
	protected void onUnregistered(Context context, String registrationId) {
		Log.d(TAG, "GCMIntentService Device unregistered");
		// displayMessage(context, getString(R.string.gcm_unregistered));

	}

	/**
	 * Method called on Receiving a new message
	 * */
	@Override
	protected void onMessage(Context context, Intent intent) {
		Log.d(TAG, "GCMIntentService Received message");
		String message = intent.getExtras().getString("message");

		// displayMessage(context, message);
		// notifies user
		generateNotification(context, message);
	}

	/**
	 * Method called on receiving a deleted message
	 * */
	@Override
	protected void onDeletedMessages(Context context, int total) {
		Log.d(TAG, "GCMIntentService Received deleted messages notification");
		// String message = getString(R.string.gcm_deleted, total);
		// //displayMessage(context, message);
		// // notifies user
		// generateNotification(context, message);
	}

	/**
	 * Method called on Error
	 * */
	@Override
	public void onError(Context context, String errorId) {
		Log.d(TAG, "GCMIntentService Received error: " + errorId);
		// displayMessage(context, getString(R.string.gcm_error, errorId));
	}

	@Override
	protected boolean onRecoverableError(Context context, String errorId) {
		// log message
		Log.d(TAG, "GCMIntentService Received recoverable error: " + errorId);
		// displayMessage(context,
		// getString(R.string.gcm_recoverable_error, errorId));
		return super.onRecoverableError(context, errorId);
	}

	/**
	 * Issues a notification to inform the user that server has sent a message.
	 */
	private static void generateNotification(Context context, String message) {

		int icon = R.drawable.ic_launcher;
		long when = System.currentTimeMillis();

		if (message == null)
			return;

		String type = "one";
		String id = null;
		Log.d("TAG", "message : "+ message);
		try {
			if (message.contains("###")) {
				String[] parts = message.split("###");
				message = parts[0];
				id = parts[1];
				type = parts[2];
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		NotificationManager notificationManager = (NotificationManager) context
				.getSystemService(Context.NOTIFICATION_SERVICE);
		Log.d("TAG", "generateNotification" + message);
		Notification notification = new Notification(icon, message, when);

		String title = context.getString(R.string.app_name);
		Intent notificationIntent = null;

		notificationIntent = new Intent(context, RegisterActivity.class);

		notificationIntent.putExtra("fromNotification", true);
		notificationIntent.putExtra("id", id);

		// if (type.equals("one"))
		// notificationIntent = new Intent(context, MainActivity.class);
		// else if (type.equals("two"))
		// notificationIntent = new Intent(context, SecondActivity.class);
		// else {
		// notificationIntent = new Intent(context, MainActivity.class);
		// }
		// set intent so it does not start a new activity
		notificationIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP
				| Intent.FLAG_ACTIVITY_SINGLE_TOP);

		// To setting multiple notification
		Random r = new Random();
		int random = r.nextInt(1000);

		PendingIntent intent = PendingIntent.getActivity(context, random,
				notificationIntent, PendingIntent.FLAG_ONE_SHOT);
		notification.setLatestEventInfo(context, title, message, intent);
		notification.flags |= Notification.FLAG_AUTO_CANCEL;

		// Play default notification sound
		notification.defaults |= Notification.DEFAULT_SOUND;

		// Vibrate if vibrate is enabled
		notification.defaults |= Notification.DEFAULT_VIBRATE;
		notificationManager.notify(random, notification);

	}

}
