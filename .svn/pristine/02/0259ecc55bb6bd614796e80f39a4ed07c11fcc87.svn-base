package com.ctyprosoft.tmg;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Hashtable;

import object.BrandList;
import object.Location_Shop;

import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.ActionBar;
import android.app.ActionBar.OnNavigationListener;
import android.app.Activity;
import android.app.ActivityManager;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.android.activity.ListNearByActivity;
import com.ctyprosoft.tmg.R;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator;
import com.nostra13.universalimageloader.cache.memory.impl.FIFOLimitedMemoryCache;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.QueueProcessingType;
import com.nostra13.universalimageloader.core.assist.SimpleImageLoadingListener;


public class GoogleMapActivity extends Activity implements OnNavigationListener {

	// Google Map
	private GoogleMap googleMap;
	private ArrayList<Location_Shop> locations;
	double lat = 10.771890, lng = 106.667448;
	private Marker marker;
	private Hashtable<String, String> markers;
	private ImageLoader imageLoader;
	private DisplayImageOptions options;
	private ArrayList<BrandList> brandLists;
	public static ArrayList<Location_Shop> currentLocations;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		// getWindow().requestFeature(Window.FEATURE_ACTION_BAR_OVERLAY);

		setContentView(R.layout.activity_google_map);

		// get BrandList
		new HttpRequestTask(2)
				.execute("http://tmg.ctyprosoft.com:81/API/Brand/GetBrandList.aspx");

		// Loading map
		initilizeMap();

		// Setting map
		settingMap();

		Location lc = getLocation();
		LatLng latLng = null;
		if (lc != null)
			latLng = new LatLng(lat = lc.getLatitude(), lng = lc.getLongitude());
		else
			latLng = new LatLng(lat, lng);

		googleMap.animateCamera(CameraUpdateFactory.newLatLngZoom(latLng, 13));

		Log.d("TAG", " ok ");

		// HttpRequest
		new HttpRequestTask(1)
				.execute("http://tmg.ctyprosoft.com:81/api/Stores/SearchNearbyStore.aspx?x="
						+ lng + "&y=" + lat);

		// Search Event
		// Getting reference to btn_find of the layout activity_main
		// Button btn_find = (Button) findViewById(R.id.btn_find);

	}

	@Override
	protected void onResume() {
		super.onResume();
		// initilizeMap();
	}

	/**
	 * function to load map If map is not created it will create it for you
	 * */
	private void initilizeMap() {
		if (googleMap == null) {
			googleMap = ((MapFragment) getFragmentManager().findFragmentById(
					R.id.map)).getMap();
			initImageLoader();
			markers = new Hashtable<String, String>();
			imageLoader = ImageLoader.getInstance();

			options = new DisplayImageOptions.Builder()
					// .showStubImage(R.drawable.ic_launcher)
					// Display Stub Image
					// .showImageForEmptyUri(R.drawable.ic_launcher)
					// If Empty image found
					.cacheInMemory().cacheOnDisc()
					.bitmapConfig(Bitmap.Config.RGB_565).build();

			googleMap.setInfoWindowAdapter(new CustomInfoWindowAdapter());

			// check if map is created successfully or not
			if (googleMap == null) {
				Toast.makeText(getApplicationContext(),
						"Sorry! unable to create maps", Toast.LENGTH_SHORT)
						.show();
			}
		}
	}

	/**
	 * to init actionbar
	 */
	private void initActionBar() {
		ActionBar ab = getActionBar();
		ab.setDisplayHomeAsUpEnabled(true);
		// ab.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
		// ab.setStackedBackgroundDrawable(new
		// ColorDrawable(Color.TRANSPARENT));

		// ab.setBackgroundDrawable(new ColorDrawable(Color
		// .parseColor("#330000ff")));
		// ab.setStackedBackgroundDrawable(new ColorDrawable(Color
		// .parseColor("#550000ff")));

		// ab.setDisplayShowTitleEnabled(true);
		// ab.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
		//

		int n = brandLists.size() + 1;
		final String[] entries = new String[n];
		entries[0] = "-- All --";
		for (int i = 0; i < brandLists.size(); i++) {
			entries[i + 1] = brandLists.get(i).getName();
		}

		ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,
				android.R.layout.simple_spinner_dropdown_item, entries);

		// adapter.setDropDownViewResource(R.layout.sherlock_spinner_dropdown_item);

		// create ICS spinner
		// IcsSpinner spinner = new IcsSpinner(this, null,
		// R.attr.actionDropDownStyle);
		Spinner spinner = new Spinner(this);
		spinner.setAdapter(adapter);
		spinner.setOnItemSelectedListener(new OnItemSelectedListener() {

			@Override
			public void onItemSelected(AdapterView<?> arg0, View arg1, int pos,
					long arg3) {
				// TODO Auto-generated method stub

				switch (pos) {
				case 0: // always this case
					Toast.makeText(getBaseContext(), "pos: " + pos,
							Toast.LENGTH_SHORT).show();
					currentLocations = new ArrayList<Location_Shop>();
					currentLocations = locations;

					break;
				case 1:
					Toast.makeText(getBaseContext(), "pos: " + pos,
							Toast.LENGTH_SHORT).show();

					break;
				case 2:
					Toast.makeText(getBaseContext(), "pos: " + pos,
							Toast.LENGTH_SHORT).show();

					break;
				case 3:
					Toast.makeText(getBaseContext(), "pos: " + pos,
							Toast.LENGTH_SHORT).show();

					break;

				default:
					break;
				}

			}

			@Override
			public void onNothingSelected(AdapterView<?> arg0) {
				// TODO Auto-generated method stub

			}
		});

		// List Image
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
				LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
		ImageView btnList = new ImageView(this);
		btnList.setImageResource(R.drawable.whitebackline64);
		btnList.setBackgroundResource(R.drawable.img_bg);
		btnList.setLayoutParams(lp);
		btnList.setClickable(true);
		btnList.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Intent i = new Intent(GoogleMapActivity.this,
						ListNearByActivity.class);
				// put data
				// i.putExtra("BrandLists", currentBrandLists);
				startActivity(i);
			}
		});

		// configure custom view
		LinearLayout listNavLayout = new LinearLayout(this);
		LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
				LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
		params.gravity = Gravity.CENTER;
		listNavLayout.addView(spinner, params);
		listNavLayout.addView(btnList, lp);
		listNavLayout.setGravity(Gravity.RIGHT); // <-- align the spinner to the
													// right

		// configure action bar
		ab.setCustomView(listNavLayout, new ActionBar.LayoutParams(
				Gravity.RIGHT));
		ab.setDisplayShowCustomEnabled(true);
	}

	@Override
	public boolean onOptionsItemSelected(android.view.MenuItem item) {
		switch (item.getItemId()) {
		case android.R.id.home:
			finish();
			break;

		default:
			break;
		}
		// TODO Auto-generated method stub
		return super.onOptionsItemSelected(item);
	}

	/**
	 * To setting values for Map
	 */
	private void settingMap() {
		// // Changing map type
		googleMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);
		// googleMap.setMapType(GoogleMap.MAP_TYPE_HYBRID);
		// googleMap.setMapType(GoogleMap.MAP_TYPE_SATELLITE);
		// googleMap.setMapType(GoogleMap.MAP_TYPE_TERRAIN);
		// googleMap.setMapType(GoogleMap.MAP_TYPE_NONE);

		// Showing / hiding your current location
		googleMap.setMyLocationEnabled(true);

		// Enable / Disable zooming controls
		googleMap.getUiSettings().setZoomControlsEnabled(false);

		// Enable / Disable my location button
		googleMap.getUiSettings().setMyLocationButtonEnabled(true);

		// Enable / Disable Compass icon
		googleMap.getUiSettings().setCompassEnabled(true);

		// Enable / Disable Rotate gesture
		googleMap.getUiSettings().setRotateGesturesEnabled(true);

		// Enable / Disable zooming functionality
		googleMap.getUiSettings().setZoomGesturesEnabled(true);
	}

	/**
	 * To get the last known Location
	 * 
	 * @return Location
	 */
	private Location getLocation() {
		Criteria criteria = new Criteria();
		criteria.setAccuracy(Criteria.ACCURACY_FINE);
		criteria.setPowerRequirement(Criteria.POWER_LOW);

		LocationManager mlocManager = (LocationManager) this
				.getSystemService(Context.LOCATION_SERVICE);

		Location mLoc = null;
		String locationprovider = mlocManager.getBestProvider(criteria, true);
		try {
			/* If User's phone don't have GoogleMap then this line is error */
			mLoc = mlocManager.getLastKnownLocation(locationprovider);
		} catch (Exception e) {
			return null;
		}

		if (mLoc != null) {
			return mLoc;
		} else {
			return null;
		}
	}

	@Override
	public boolean onNavigationItemSelected(int arg0, long arg1) {
		// TODO Auto-generated method stub
		return false;
	}

	class HttpRequestTask extends AsyncTask<String, String, String> {
		private int type; // 1 get location; 2: get Brand list

		// Show a Alert Dialog

		public HttpRequestTask(int type) {
			this.type = type;
		}

		@Override
		protected String doInBackground(String... uri) {
			HttpClient httpclient = new DefaultHttpClient();
			HttpResponse response;
			String responseString = null;
			try {
				response = httpclient.execute(new HttpGet(uri[0]));
				StatusLine statusLine = response.getStatusLine();
				if (statusLine.getStatusCode() == HttpStatus.SC_OK) {
					ByteArrayOutputStream out = new ByteArrayOutputStream();
					response.getEntity().writeTo(out);
					out.close();
					responseString = out.toString();
				} else {
					// Closes the connection.
					response.getEntity().getContent().close();
					throw new IOException(statusLine.getReasonPhrase());
				}
			} catch (ClientProtocolException e) {
				// TODO Handle problems..
			} catch (IOException e) {
				// TODO Handle problems..
			}
			return responseString;
		}

		@Override
		protected void onPostExecute(String result) {
			super.onPostExecute(result);
			// Do anything with response..
			// Log.d("TAG", "result: "+ result);
			if (type == 1) {
				try {
					JSONArray jsonArray = new JSONArray(result);

					// init locations
					initLocation_Shop(jsonArray);

					// initMarker();
					initMarker();

					// init ActionBar
					initActionBar();

				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			if (type == 2) {
				try {
					JSONArray jsonArray = new JSONArray(result);

					// init Brand List
					initBrand_List(jsonArray);

				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		}
	}

	private void initMarker() {
		// TODO Auto-generated method stub
		Log.d("TAG", "initMarker");
		Log.d("TAG", "Location size: " + locations.size());
		MarkerOptions markerOptions;
		for (int i = 0; i < locations.size(); i++) {
			markerOptions = new MarkerOptions().position(new LatLng(locations
					.get(i).getmGeoY(), locations.get(i).getmGeoX()));
			markerOptions.title(locations.get(i).getmStoreName());
			markerOptions.snippet(locations.get(i).getmPhone());
			markerOptions.icon(BitmapDescriptorFactory
					.defaultMarker(BitmapDescriptorFactory.HUE_ORANGE));
			Marker kiel = googleMap.addMarker(markerOptions);
			String add = "add" + kiel.getId();
			markers.put(add, locations.get(i).getmAddress());
			markers.put(kiel.getId(), locations.get(i).getmLogo());
		}

	}

	private void initBrand_List(JSONArray jsonArray) {
		brandLists = new ArrayList<BrandList>();
		for (int i = 0; i < jsonArray.length(); i++) {
			JSONObject jsonObject;
			try {
				jsonObject = jsonArray.getJSONObject(i);

				int ID = jsonObject.getInt("ID");
				String Name = jsonObject.getString("Name");
				String FBPage = jsonObject.getString("FBPage");
				String Logo = jsonObject.getString("Logo");

				brandLists.add(new BrandList(ID, Name, FBPage, Logo));

			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
	}

	private void initLocation_Shop(JSONArray jsonArray) {
		// TODO Auto-generated method stub
		locations = new ArrayList<Location_Shop>();
		Log.d("TAG", "jsonArray size: " + jsonArray.length());
		for (int i = 0; i < jsonArray.length(); i++) {
			JSONObject jsonObject;
			try {
				jsonObject = jsonArray.getJSONObject(i);

				int mID = jsonObject.getInt("ID");
				int mBrandID = jsonObject.getInt("BrandID");
				int mCityID = jsonObject.getInt("CityID");
				int mValid = jsonObject.getInt("Valid");

				double mDistance = jsonObject.getDouble("Distance");
				double mGeoX = Double.parseDouble(jsonObject.getString("GeoX"));
				double mGeoY = Double.parseDouble(jsonObject.getString("GeoY"));

				String mBrandName = jsonObject.getString("BrandName");
				String mStoreName = jsonObject.getString("StoreName");
				String mAddress = jsonObject.getString("Address");
				String mPhone = jsonObject.getString("Phone");
				String mCityName = jsonObject.getString("CityName");
				String mLogo = jsonObject.getString("Logo");

				locations.add(new Location_Shop(mID, mBrandID, mCityID, mValid,
						mDistance, mGeoX, mGeoY, mBrandName, mStoreName,
						mAddress, mPhone, mCityName, mLogo));

			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

		Log.d("TAG", "sss: " + locations.size());
		//
		// locations.add(new Location_Shop(10.771907, 106.657736,
		// "Ä�H BÃ¡ch Khoa",
		// "Há»“ ChÃ­ Minh"));

	}

	private class CustomInfoWindowAdapter implements InfoWindowAdapter {

		private View view;

		public CustomInfoWindowAdapter() {
			view = getLayoutInflater().inflate(R.layout.custom_info_window,
					null);
		}

		@Override
		public View getInfoContents(Marker marker) {

			if (GoogleMapActivity.this.marker != null
					&& GoogleMapActivity.this.marker.isInfoWindowShown()) {
				GoogleMapActivity.this.marker.hideInfoWindow();
				GoogleMapActivity.this.marker.showInfoWindow();
			}
			return null;
		}

		@Override
		public View getInfoWindow(final Marker marker) {
			GoogleMapActivity.this.marker = marker;

			String url = null;
			String add = null;

			if (marker.getId() != null && markers != null && markers.size() > 0) {
				if (markers.get(marker.getId()) != null
						&& markers.get(marker.getId()) != null) {
					url = markers.get(marker.getId());
					add = markers.get("add" + marker.getId());
				}
			}
			// Log.d("TAG", "add: "+ add);
			final ImageView image = ((ImageView) view.findViewById(R.id.badge));

			if (url != null && !url.equalsIgnoreCase("null")
					&& !url.equalsIgnoreCase("")) {
				imageLoader.displayImage(url, image, options,
						new SimpleImageLoadingListener() {
							@Override
							public void onLoadingComplete(String imageUri,
									View view, Bitmap loadedImage) {
								super.onLoadingComplete(imageUri, view,
										loadedImage);
								getInfoContents(marker);
							}
						});
			} else {
				image.setImageResource(R.drawable.logo);
			}

			final String title = marker.getTitle();
			final TextView titleUi = ((TextView) view.findViewById(R.id.title));
			if (title != null) {
				titleUi.setText(title);
			} else {
				titleUi.setText("");
			}

			final String phone = marker.getSnippet();
			final TextView snippetUi = ((TextView) view
					.findViewById(R.id.phone));
			if (phone != null) {
				snippetUi.setText(phone);
			} else {
				snippetUi.setText("");
			}

			final TextView address = ((TextView) view.findViewById(R.id.add));

			if (add != null) {
				address.setText(add);
			} else {
				address.setText("");
			}

			return view;
		}
	}

	private void initImageLoader() {
		int memoryCacheSize;
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ECLAIR) {
			int memClass = ((ActivityManager) getSystemService(Context.ACTIVITY_SERVICE))
					.getMemoryClass();
			memoryCacheSize = (memClass / 8) * 1024 * 1024;
		} else {
			memoryCacheSize = 2 * 1024 * 1024;
		}

		final ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(
				this)
				.threadPoolSize(5)
				.threadPriority(Thread.NORM_PRIORITY - 2)
				.memoryCacheSize(memoryCacheSize)
				.memoryCache(
						new FIFOLimitedMemoryCache(memoryCacheSize - 1000000))
				.denyCacheImageMultipleSizesInMemory()
				.discCacheFileNameGenerator(new Md5FileNameGenerator())
				.tasksProcessingOrder(QueueProcessingType.LIFO).enableLogging()
				.build();

		ImageLoader.getInstance().init(config);
	}

}
